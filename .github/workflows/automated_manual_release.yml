# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      release-description:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Release Description'
        # Default value if no value is explicitly provided
        default: 'Default Value'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string
      release-tag:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Release Tag'
        # Default value if no value is explicitly provided
        default: 'V.0.0.0'
        # Input has to be provided for the workflow to run
        required: false
        # The data type of the input
        type: string

jobs:
  release:
    runs-on: windows-2025

    steps:      
      - name: Check out testing branch on git repo
        uses: actions/checkout@v1
        with:
          ref: workflow-testing

      # MAIN COMPILE

      - name: (MAIN compile main application) Install Nodejs and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 20.13.1

      - name: npm install
        run: |
          npm install

      - name: run packaging
        run: |
          npm run package

      - name: copy main program files into build folder
        run: |
          mkdir build/binary_dependencies
          robocopy release/build/win-unpacked build /MIR
          if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }

      - name: (DISCORD compile discord helper child application) Setup and Install dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.302'

      # C# COMPILE

      - name: Compile C# application
        run: |
          cd dotnet_discord_rpc
          dotnet build

      - name: show directory of built C# program
        run: |
          cd dotnet_discord_rpc/bin/debug/net8.0
          tree /f
      
      - name: copy c# built files into build folder
        run: |
          robocopy dotnet_discord_rpc/bin/debug/net8.0 build/binary_dependencies /MIR
          if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }

      - name: Zip release
        run: |
          Compress-Archive build build.zip

      - name: show directory of built program
        run: |
          cd build
          tree /f

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.release-tag }}
          release_name: ${{ github.event.inputs.release-tag }}
          body: |
            ${{ github.event.inputs.release-description }}

            Release Generated by github action script
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip



